#!/usr/bin/perl -0777

use open IN => ':raw';
%escape_of = ("\0" => '\0', "\n"=>'\n', "\r"=>'\r', "\t"=>'\t', "\e"=>'\e');

use Getopt::Std;
$Getopt::Std::STANDARD_HELP_VERSION = 1;
getopts '4b:';
$addr = hex($opt_b);

$size    = $opt_4 ? 4 : 1;
$nibbles = $size * 2;
$msb  = $size*8 - 1;
$others = 'f' x $nibbles;
$fmt = $opt_4 ? 'L>' : 'C';

$bin .= $_ while <>;

for ($bin =~ /.{1,$size}/gs) {
    my $field = unpack $fmt, "$_\0\0\0";

    $whens .= ' ' x 8;
    $whens .= sprintf 'when X"%04x_%04x" => my_z <= X"%0*x"; -- ',
                        $addr >> 16, $addr & 0xFFFF, $nibbles, $field;
    for (split '') {
        $whens .= $escape_of{$_} ? $escape_of{$_}
                : /[[:print:]]/  ? $_
                :                  ".";
    }
    $whens .= "\n";

    $addr += $size;
}

print <DATA> =~ s/(\$\w+)/$1/geer;

__DATA__
-- Generated by tools/generate-rom.pl
-- Template: https://www.xilinx.com/support/answers/8183.html

library ieee;
use ieee.std_logic_1164.all;
entity rom is
    port ( a: in std_logic_vector(31 downto 0);
           z: out std_logic_vector($msb downto 0);
           en: std_logic
         );
    attribute syn_romstyle : string;
    attribute syn_romstyle of z : signal is "select_rom";
end rom;

architecture rtl of rom is
    signal my_z : std_logic_vector($msb downto 0);
    begin
        z <= my_z when en = '1' else (others => 'Z');
    process(a)
        begin
        case a is

$whens
        when others => my_z <= X"$others";
        end case;
    end process;
end rtl;
